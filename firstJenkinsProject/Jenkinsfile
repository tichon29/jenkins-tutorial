// Boolean isMatchingPR

pipeline {
    agent any
    stages {
        stage('Build') {
            options {
                timeout(time: 10, unit: "SECONDS")
            }
            steps {
                echo "Go to sleep for 1s"
                sleep(time: 1, unit: "SECONDS")
                echo "awake"
                sh 'echo "Checking files"'
                sh '''
                    #!/bin/sh
                    ls -la
                    echo "Checking fit"
                    if (grep -rnw 'firstJenkinsProject/test' -e 'fit(') || (grep -rnw 'firstJenkinsProject/test' -e 'fdescribe(')
                    then
                        echo "Should fail"
                        exit 1
                    else
                        echo "We are clean"
                    fi
                    echo "end"
                '''
            }
        }
        stage('For PR - Check PR Title') {
            // when {
            //     expression { BRANCH_NAME !== 'main' }
            // }
            steps {
                echo "This is a PR"
                checkTitleFake()
                //echo isMatchingPR
            }
        }
        // stage('Matching PR') {
        //     when {
        //         isMatchingPR
        //     }
        //     steps {
        //         echo "Matching PR"
        //         input {
        //             message "Ok with this?"
        //             ok "Yes"
        //         }
        //     }
        // }
        // returns a list of changed files
        stage('Check all updates') {
            steps {
                echo "Get list of updated files"
                getChangedFilesList()
            }        
        }
    }
}

@NonCPS
boolean checkTitleFake() {
    def testStr = "abc-012"
    def testRegexp = /^bc-([0-9]*)/
    if (testStr.startsWith('abc')) {
        echo "Matching abc"
        if (testStr =~ testRegexp) {
            echo "Matching Regexp"
            return true
        }
    }
    return false
}
String getChangedFilesList() {
    echo "inside Get Changed Files List"
    changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
        for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
            echo "Commit Message is: "
               echo entry.getMsgAnnotated()
            for (file in entry.getAffectedFiles()) {
                echo "Updated file is: "
                echo file.getPath()
                changedFiles.add(file.getPath()) // add changed file to list
            }
        }
    }
    return changedFiles
}
