Boolean isMatchingPR

// CODE_CHANGES=getGitChanges()
pipeline {
    agent any
    tools {
        nodejs "NODEJS"
    }
    environment {
        MY_ENV_VAR = "1.0.0"
    }
    stages {
        stage('Build') {
            options {
                timeout(time: 10, unit: "SECONDS")
            }
            steps {
                echo "Go to sleep for 1s"
                sleep(time: 1, unit: "SECONDS")
                echo "awake"
                sh 'echo "Checking files"'
                sh '''
                    #!/bin/sh
                    ls -la
                    echo "Checking fit"
                    if (grep -rnw 'firstJenkinsProject/test' -e 'fit(') || (grep -rnw 'firstJenkinsProject/test' -e 'fdescribe(')
                    then
                        echo "Should fail"
                        exit 1
                    else
                        echo "We are clean"
                    fi
                    echo "end"
                '''
            }
        }
        stage('For PR - Check PR Title') {
            when {
                expression { BRANCH_NAME != 'main' }
            }
            steps {
                echo "Check Is Matching PR"
                script {
                    isMatchingPR = checkTitleFake()
                }
            }
        }
        stage('Check if code changes on main branch') {
            // when {
            //     expression { BRANCH_NAME == 'main' && CODE_CHANGES == true}
            // }
            when {
                expression { BRANCH_NAME == 'main'}
            }
            steps {
                sh 'printenv'
                echo "Code has changed on main branch"
                echo "Git Commit: ${GIT_COMMIT}"
                echo "Env Variable: ${MY_ENV_VAR}"
                echo "Branch Name: ${BRANCH_NAME}"
            }
        }
        stage('Matching PR') {
            when {
                expression { isMatchingPR }
            }
            steps {
                echo "Print the env variables"
                // sh 'printenv'
                // echo "Git Commit: ${GIT_COMMIT}"
                // echo "Env Variable: ${MY_ENV_VAR}"
                // echo "Branch Name: ${BRANCH_NAME}"
                // sh 'git rev-parse ${GIT_COMMIT}'
                // sh 'git rev-parse ${GIT_COMMIT}^1'
                // sh 'git log --pretty=%P -n 1'
                // sh "git hist | grep origin/main | cut -d ' ' -f 2"
                // sh "git hist | grep origin/main | awk '{print \$2}'"
                // parentCommit = $(sh "git hist | grep origin/main | awk '{print \$2}'")
                // echo "Parent Commit id is ${parentCommit}"
                // sh "git diff --name-only ${parentCommit}..HEAD"
                // echo "${isReadme} - ${isReadme2}"

                sh 'git branch'
                sh 'git log --graph --decorate --oneline'
                sh 'git log --oneline --pretty=format:\'%h\' -1'
                sh 'git rev-parse HEAD^1'
                sh 'git rev-parse HEAD^^1'
                sh 'git rev-parse HEAD^2'
                sh 'git hist'
                // echo "Manual input needed"

                script {
                    def nodeVersion = sh returnStdout: true, script:
                    """
                    node -v
                    """
                    echo "After script: Node version is ${nodeVersion}"
                    def scriptRes = sh returnStdout: true, script:
                    """
                    node firstJenkinsProject/checkfile.js
                    """
                    def splittedElem = scriptRes.split('\n')
                    def lastItem = splittedElem[splittedElem.length - 1]
                    echo lastItem
                    if (lastItem == "true") {
                        echo "Matching identified"
                        input (message: "Ok with these changes?", ok: "Oh Yes", cancel: "Oh no", submitter: "tichon, tichon2", submitterParameter: "SUBMITTER_USERNAME")
                    } else {
                        echo "Matching NOT identified"
                    }
                    // if (isMatchingPR) {
                    // }
                }
                echo "After script"
            }   
        }
        // returns a list of changed files
        stage('Check all updates') {
            steps {
                echo "Get list of updated files"
                getChangedFilesList()
            }        
        }
    }
}

@NonCPS
boolean checkTitleFake() {
    def testStr = "abc-012"
    def testRegexp = /^abc-[0-9]*/
    if (testStr.startsWith('abc')) {
        echo "Matching abc"
        if (testStr =~ testRegexp) {
            echo "Matching Regexp"
            return true
        }
    }
    return false
}
String getChangedFilesList() {
    echo "inside Get Changed Files List"
    changedFiles = []
    def nbUpdatesFiles = 0
    nbUpdatesFiles = currentBuild.changeSets.size()
    echo "${nbUpdatesFiles} commits since last buid."
    for (changeLogSet in currentBuild.changeSets) {
        for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
            echo "Commit Message is: "
               echo entry.getMsgAnnotated()
            for (file in entry.getAffectedFiles()) {
                echo "Updated file is: "
                echo file.getPath()
                changedFiles.add(file.getPath()) // add changed file to list
            }
        }
    }
    return changedFiles
}